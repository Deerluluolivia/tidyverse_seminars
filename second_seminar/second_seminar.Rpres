Data cleaning made easy
========================================================
author: Jorge Cimentada  
date: 23rd of February of 2017  
class: illustration
font-family: 'Helvetica'
width: 1800
height: 900

What will we cover?
========================================================

- Tibbles, a re-imagined data frame.
-`tidyr`, a package for tidying your data.
- `dplyr` in more detail, to make transformation easier.

Tibbles and data frames
========================================================

R's way of storing rectangular data is called data frames. Most of you are probably familiar with this type of object.

```{r}
dir <- "https://raw.githubusercontent.com/cimentadaj/tidyverse_seminars/master/first_seminar/data/pisa2015.csv"
pisa_2015 <- read.csv(dir)
head(pisa_2015[1:7], 10)
```

Tibbles and data frames
========================================================

Tibbles are exactly as data frames with a few tweaks. Let's visit each difference separately.

1st. Printing
```{r}
library(tidyverse)
pisa <- as_tibble(pisa_2015)
pisa
```

- Data frame's dimension.
- Column classes

Try:
```{r}
glimpse(pisa)
```

Tibbles and data frames
========================================================
2nd difference: Strings as factors

By default, whenever R reads a data frame it turns EVERY character vector into a factor.

How you can fix it?
```{r, eval = F}
options(stringsAsFactors = F) # Session options
read.csv(stringsAsFactors = F) # When reading data
```

### How does tibble fix this?

- By default! Characters will be characters and factors, factors.

```{r, echo = F}
original_class <- map_chr(pisa_2015, class)[1:5]
new_class <- map_chr(read_csv(dir), class)[1:5]
cbind.data.frame(original_class, new_class)
```

Tibbles and data frames
========================================================
3rd difference: Subsetting tibbles

In short:
```{r, eval = F}
pisa_2015[, "CNTRYID"] # Gives a vector
pisa[, "CNTRYID"] # Gives a data frame
```

- How to fix this with data frames?

```{r, eval = F}
pisa_2015[, "CNTRYID", drop = F] # Gives a vector
```

Bottomline: Tibbles are always tibbles unless you subset through the `$` sign.

Try it:
```{r, eval = F}
pisa$CNTRYID
```

Tibbles and data frames
========================================================

Finally, you can officialy tell whether the object is a tibble with the `class()` function. Compare:
```{r}
class(pisa_2015)
class(pisa)
```

Other differences:
- Never adds row.names
- Only recycles length 1 inputs
- Never coerces elements

See `?tibble` for some examples.

What is a tidy dataset? tidyr
========================================================

1. Each variable forms a column.
2. Each observation forms a row.
3. Each type of observational unit forms a table.

I think we all know what a tidy dataset is but these principles are not informative.

What is a tidy dataset? tidyr
========================================================

What ISN'T a tidy dataset?

```{r}
pisa %>%
  select(CNTSTUID, starts_with("ST098Q0"))
```

ST098Q01TA - ST098Q09TA:
- When learning <school science>?
 - The teacher clearly explains the class
 - Students spend time in the laboratory
 - etc..
 
All columns are actually ONE variable.

This is a case where: Column headers are values, not variable names.

What is a tidy dataset? tidyr
========================================================

How do we fix a case of: Column headers are values, not variable names

We use tidyr's `gather()` function.

```{r}
pisa %>%
  select(CNTSTUID, starts_with("ST098Q0")) %>%
  gather(school_science, answers, -CNTSTUID)
```

We turn all columns into one variable and all values into one column.

- Informally known as long format.

What is a tidy dataset? tidyr
========================================================

How does `gather()` work? Arguments in order:

- data = tibble or data frame
- key = variable name that will store column names as rows
- value = variable name that will store the values
- ... = all columns that will be stacked:
 - Specify all column names or;
 - Delete all variables that will not be stacked.

```{r, eval = F}
pisa %>%
  gather(school_science, answers, starts_with("ST098Q0")) %>%
  select(CNT, school_science, answers)
```

We can regular expressions to search for names as in the previous `gather` call.

What is a tidy dataset? tidyr
========================================================

Other messy data problem:

How do we fix a case of: Multiple variables stored in one column

```{r}
who %>%
  select(country, year, starts_with("new_sp_"))
```

Ignore the `new_sp_`. the `m` stands for `Male` and `014` the age range `0-14`. The same logic applies for all other columns but for females.

How do we handle this?

What is a tidy dataset? tidyr
========================================================

We use `separate()`. `separate()` spreads one column across several columns.

More concretely, we start by tidying the data:
```{r}
tidy_dat <-
  who %>%
  select(country, year, starts_with("new_sp_")) %>%
  gather(age, value, -country, -year)
```
Then we spread the column into two:

```{r}
tidy_dat %>%
  mutate(age = gsub("new_sp_", "", age)) %>%
  separate(age, c("gender", "age"), sep = 1)
```

What is a tidy dataset? tidyr
========================================================

The arguments for `separate()` in order:
- data = tibble or data frame
- col = bare column name that will be split
- into = character vector containing the new column variable names
- sep = If you know regular expressions, then a regular expression,
        if a number, interpreted as the position where the split at.

`?separate` for all other arguments

Other examples:
```{r, eval = F}
df <- data.frame(x = c("a", "a b", "a b c", NA))
df %>% separate(x, c("a", "b"))

# The same behaviour but no warnings
df %>% separate(x, c("a", "b"), extra = "drop", fill = "right")

# Another option:
df %>% separate(x, c("a", "b"), extra = "merge", fill = "left")
```

What is a tidy dataset? tidyr
========================================================

Finally, the last important verb from tidyr is `spread()`. `spread()` behaves exactly the opposite as gather. It turns stacked columns into wide columns.

But wait, why should we `spread` the data when we've been discussing why you should `gather` it?

Wide data is also widely used for specific analysis, such as longitudinal modelling, matrix multiplication, among other things. Aside from these scenarios you will encounter many situations where `spread` is needed.

What is a tidy dataset? tidyr
========================================================

```{r}
pisa %>%
# Explain how to use spread. Specifically for column operations, like differences between two categories and the come back to the tidy dataset. Think of any other column operation that might be interesting. Column operations are always easier in wide format.
```