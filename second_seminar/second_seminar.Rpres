Data cleaning made easy
========================================================
author: Jorge Cimentada  
date: 23rd of February of 2017  
class: illustration
font-family: 'Helvetica'
width: 1800
height: 900

What will we cover?
========================================================

- Tibbles, a re-imagined data frame.  
- `tidyr`, a package for tidying your data.  
- `dplyr` in more detail, to make transformation easier.

Tibbles and data frames
========================================================

R's way of storing rectangular data is called data frames. Most of you are probably familiar with this type of object.

```{r}
dir <- "https://raw.githubusercontent.com/cimentadaj/tidyverse_seminars/master/first_seminar/data/pisa2015.csv"
pisa_2015 <- read.csv(dir)
head(pisa_2015[1:7], 10)
```

Tibbles and data frames
========================================================

Tibbles are exactly as data frames with a few tweaks. Let's visit each difference separately.

- 1st. Printing
```{r}
library(tidyverse)
pisa <- as_tibble(pisa_2015)
pisa
```

Tibbles and data frames
========================================================
What do we get?

- Data frame's dimension.
- Column classes

Try:
```{r}
glimpse(pisa)
```

Tibbles and data frames
========================================================
- 2nd difference: Strings as factors

By default, whenever R reads a data frame it turns EVERY character vector into a factor.

How you can fix it?
```{r, eval = F}
options(stringsAsFactors = F) # Session options
read.csv(stringsAsFactors = F) # When reading data
```

### How does tibble fix this?

- By default! Characters will be characters and factors, factors.

```{r, echo = F}
original_class <- map_chr(pisa_2015, class)[1:5]
new_class <- map_chr(read_csv(dir), class)[1:5]
cbind.data.frame(original_class, new_class)
```

Tibbles and data frames
========================================================
3rd difference: Subsetting tibbles

In short:
```{r, eval = F}
pisa_2015[, "CNTRYID"] # Gives a vector
pisa[, "CNTRYID"] # Gives a data frame
```

- How to fix this with data frames?

```{r, eval = F}
pisa_2015[, "CNTRYID", drop = F] # Gives a data frame
# drop .. data frame == F
```

Bottomline: Tibbles are always tibbles unless you subset through the `$` sign.

Try it:
```{r, eval = F}
pisa$CNTRYID
```

Tibbles and data frames
========================================================

Finally, you can officialy tell whether the object is a tibble with the `class()` function. Compare:
```{r}
class(pisa_2015)
class(pisa)
```

Other differences:
- Never adds row.names
- Only recycles length 1 inputs
- Never coerces elements

See `?tibble` for some examples.

What is a tidy dataset? tidyr
========================================================

1. Each variable forms a column.
2. Each observation forms a row.
3. Each type of observational unit forms a table.

I think we all know what a tidy dataset is but these principles are not informative.

What is a tidy dataset? tidyr
========================================================

What ISN'T a tidy dataset?

ST098Q01TA - ST098Q09TA:
- When learning school science?
 - The teacher clearly explains the class
 - Students spend time in the laboratory
 - etc..

```{r, echo = F}
pisa %>%
  select(CNTSTUID, starts_with("ST098Q0")) %>%
  head(2)
```
 
All columns are actually ONE variable.

This is a case where: Column headers are values, not variable names.

What is a tidy dataset? tidyr
========================================================

<div align="left">
<img src="./figures/gather.png" width=1200 height=500>
</div>

[http://r4ds.had.co.nz/tidy-data.html](http://r4ds.had.co.nz/tidy-data.html)

What is a tidy dataset? tidyr
========================================================

How do we fix a case of: Column headers are values, not variable names

We use tidyr's `gather()` function.

```{r}
pisa %>%
  select(CNTSTUID, starts_with("ST098Q0")) %>%
  gather(school_science, answers, -CNTSTUID)
```

We turn all columns into one variable and all values into one column.

- Informally known as long format.

What is a tidy dataset? tidyr
========================================================

How does `gather()` work? Arguments in order:

- data = tibble or data frame
- key = variable name that will store column names as rows
- value = variable name that will store the values
- ... = all columns that will be stacked:
 - Specify all column names or;
 - Delete all variables that will not be stacked.

```{r, eval = F}
pisa %>%
  gather(school_science, answers, starts_with("ST098Q0")) %>%
  select(CNT, school_science, answers)
```

We can use regular expressions to search for names as in the previous `gather` call.

What is a tidy dataset? tidyr
========================================================

How do we fix a case of: Multiple variables stored in one column

```{r}
who %>%
  select(country, year, starts_with("new_sp_")) %>%
  head(3)
```

Ignore the `new_sp_` part of the column names. The `m` stands for `Male` and `014` the age range `0-14`. The same logic applies for all other columns but for females.

How do we handle this?

What is a tidy dataset? tidyr
========================================================

We use `separate()`. `separate()` spreads one column into several columns.

More concretely, we start by tidying the data:
```{r}
tidy_dat <-
  who %>%
  select(country, year, starts_with("new_sp_")) %>%
  gather(age, value, -country, -year)
```

Then we spread the column into two:

```{r, echo = F}
tidy_dat %>%
  mutate(age = gsub("new_sp_", "", age)) %>%
  separate(age, c("gender", "age"), sep = 1)
```

What do you think the result will be? Try it out yourself.

What is a tidy dataset? tidyr
========================================================

The arguments for `separate()` in order:
- data = tibble or data frame
- col = bare column name that will be split
- into = character vector containing the new column variable names
- sep = If you know regular expressions, then a regular expression,
        if a number, interpreted as the position where the split at.

`?separate` for all other arguments

Other examples:
```{r, eval = F}
df <- data.frame(x = c("a", "a b", "a b c", NA))
df %>% separate(x, c("a", "b"))

# The same behaviour but no warnings
df %>% separate(x, c("a", "b"), extra = "drop", fill = "right")

# Another option:
df %>% separate(x, c("a", "b"), extra = "merge", fill = "left")
```

What is a tidy dataset? tidyr
========================================================

Finally, the last important verb from tidyr is `spread()`. `spread()` behaves exactly the opposite as gather. It turns stacked columns into wide columns.

But wait, why should we `spread` the data when we've been discussing why you should `gather` it, i.e tidy data?

Wide data is also widely used for specific analysis: 
- longitudinal modelling
- matrix multiplication

Aside from these scenarios you will encounter many situations where `spread` is needed.

What is a tidy dataset? tidyr
========================================================
When will you use `spread`?

```{r}
pisa %>%
  rename(country = CNT,
         math_score = PV1MATH,
         gender = ST004D01T) %>%
  group_by(country, gender) %>%
  summarise(avg_math = mean(math_score, na.rm = T)) %>%
  head(5)
```

How would you calculate the difference between males and females for each country?

What is a tidy dataset? tidyr
========================================================

```{r}
pisa %>%
  rename(country = CNT,
         math_score = PV1MATH,
         gender = ST004D01T) %>%
  group_by(country, gender) %>%
  summarise(avg_math = mean(math_score, na.rm = T)) %>%
  spread(gender, avg_math) %>%
  mutate(diff = `2` - `1`) %>%
  head(4)
```

What is a tidy dataset? tidyr
========================================================
At this point you could re-`gather` the previous result.

Try doing it yourself!

Gather the previous result so that there's a column named `categories` which has the categories `1`, `2` and `diff` and a `value` column containing the scores for each category.


What is a tidy dataset? tidyr
========================================================
```{r}
pisa %>%
  rename(country = CNT,
         math_score = PV1MATH,
         gender = ST004D01T) %>%
  group_by(country, gender) %>%
  summarise(avg_math = mean(math_score, na.rm = T)) %>%
  spread(gender, avg_math) %>%
  mutate(diff = `2` - `1`) %>%
  gather(categories, value, -country) %>%
  arrange(country, categories) %>% # This part is optional
  head(6)
```

What is a tidy dataset? tidyr
========================================================

<div align="left">
<img src="./figures/spread.png" width=1200 height=500>
</div>

[http://r4ds.had.co.nz/tidy-data.html](http://r4ds.had.co.nz/tidy-data.html)

What is a tidy dataset? tidyr
========================================================

```{r}
people <- tribble(
  ~name,             ~key,    ~value,
  #-----------------|--------|------
  "Phillip Woods",   "age",       45,
  "Phillip Woods",   "height",   186,
  "Phillip Woods",   "age",       50,
  "Jessica Cordero", "age",       37,
  "Jessica Cordero", "height",   156
)
```
```{r, eval = F}
people %>%
  spread(key, value)
```

Run it and why does this fail?

What is a tidy dataset? tidyr
========================================================

Possible solutions:

* This might be a typo because Phillip Woods has `two` ages.
* If for some reason you don't want to delete that row, then you can fix it by adding a column that uniquely identifies each user.

```{r}
people %>%
  mutate(id = c(1, 1, 2, 3, 3)) %>%
  spread(key, value)
```

What is a tidy dataset? tidyr
========================================================

Let's do an exercise. I give you this tibble:
```{r}
preg <- tribble(
  ~pregnant, ~male, ~female,
  "yes",     NA,    10,
  "no",      20,    12
)

preg
```

What is a tidy dataset? tidyr
========================================================

Can you turn that into:

```{r, eval = F}
# A tibble: 4 × 3
  gender pregnant  freq
   <chr>    <chr> <dbl>
1 female       no    12
2   male       no    20
3 female      yes    10
4   male      yes    NA
```

Hint: You'll need to use `gather`, `spread` and then `gather`.

What is a tidy dataset? tidyr
========================================================

We start off by gathering the `male` and `female` columns into a gender column and the values in a column called `freq`

```{r}
preg %>%
  gather(gender, freq, -pregnant)
```

So we have the correct result but the order is still different. We need to `spread` the pregnant variable and then `gather` it again.

What is a tidy dataset? tidyr
========================================================

```{r}
preg %>%
  gather(gender, freq, -pregnant) %>%
  spread(pregnant, freq)
```

So far so good, now we have a data frame which is excatly the opposite as the first one. In fact, it is exactly the same tibble but transposed, i.e. the rows are column and the columns rows.

What is a tidy dataset? tidyr
========================================================
```{r}
preg %>%
  gather(gender, freq, -pregnant) %>%
  spread(pregnant, freq) %>%
  gather(pregnant, freq)
```

Ups, what's wrong?

What is a tidy dataset? tidyr
========================================================
Remember that gathering is applied to all columns by default. You have to specify which columns you want to be stacked. In our example, we need to exclude the gender column

```{r}
preg %>%
  gather(gender, freq, -pregnant) %>%
  spread(pregnant, freq) %>%
  gather(pregnant, freq, -gender)
```

What is a tidy dataset? tidyr
========================================================
Finally, let's introduce `unite` which is the exact opposite of `separate`.

If you remember correctly, `separate` allowed you to separate one column into several columns by specifying either:

- a regular expression
- the index in which the separation needs to take place.

`unite` takes several columns and unites them into one.

What is a tidy dataset? tidyr
========================================================

A not-so clear example.

There's two columns that specify the `CNTRYID` and the `CNTSCHID` (Country School ID) in the PISA dataset. There's also another column named `BOOKID` which specifies the `BOOK` the used to answer the survey. Let's paste them all together with `unite`!

```{r, eval = F}
pisa %>%
  unite(overall_id, CNTRYID, CNTSCHID, BOOKID) %>%
  head(5)
```


What is a tidy dataset? tidyr
========================================================

Pretty neat? We can also change the separator with the sep argument.

```{r}
pisa %>%
  unite(overall_id, CNTRYID, CNTSCHID, BOOKID, sep = "") %>%
  head(5)
```


Why is R so difficult at data cleaning?
========================================================

It's difficult if you're not familiar with most base R functions.

As mentioned before, most data cleaning skills require intimate knowledge with:
- Vectorized operations
- For loops
- [The apply family](https://www.datacamp.com/community/tutorials/r-tutorial-apply-family#gs.4lcAXts)
- [Common base R functions](http://adv-r.had.co.nz/Vocabulary.html)

Most of this knowledge comes together with time and practice. The benefit of the tidyverse is the fast adoption of the syntax and the simplification of many common tasks.

Why is R so difficult at data cleaning?
========================================================

This doesn't mean you don't need to learn vectorized operations, common base R functions or for loops. These are important and defining components of a rich data analysis vocabulary.

In order to be a proficient data analysis you will eventually have to leave the `tidyverse`.

More importantly, in order to create useful tools and insightful analysis you'll need to use `non-tidyverse` tools.

dplyr and relational databases
========================================================

```{r}

```