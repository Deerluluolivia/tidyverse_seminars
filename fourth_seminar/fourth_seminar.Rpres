Automating everything: we should always strive for it!
========================================================
author: Jorge Cimentada
date: 9th of March 2017
class: illustration
font-family: 'Helvetica'
width: 1800
height: 900

```{r, echo = F}
knitr::opts_chunk$set(
  fig.align = 'center',
  fig.width = 10
)
```


Functions in R
========================================================
This is a function.

```{r}
adds_1 <- function(my_number) {
  my_number + 1
}

adds_1(5)
```

- You need to pick a _name_ for the function

- You list the inputs or _arguments_ inside the blue function

- You place the code you have developed in the _body_ of the function

#### When should you write a function?
Write a function whenever youâ€™ve copied and pasted a block of code more than twice.

Functions in R
========================================================

Functions can be used within other functions:

```{r, eval = F}
multiplier <- function(x, number) {
  adds_1(x) * number
}

multiplier(5, 2)
```

What is the result of this function call?

Functions in R
========================================================

You can think of functions like little factories: Every factory takes some inputs, and returns an output (its product).

- They take some inputs (function arguments) and return an output.

- They are black boxes. From the outside, nobody knows what goes on inside the factory.

```{r, fig.width = 7, fig.height = 3}
random_num_generator <- function(n) {
  x <- rnorm(n)
  y <- rnorm(n)
  plot(x, y)
}

random_num_generator(100)
```

Run this and try searching for `x` or `y` inside your working directory.


Functions in R
========================================================

Everytime you call a function, everything that is created inside the function belongs to that functions environment.

Our GlobalEnvironment
```{r}
environment()
```

The environment inside a function (randomly generated)
```{r}
function_env <- function() environment()
function_env()
```

## Think of environments as boxes that contain objects such as functions and vectors. Inside a function, this box is created when the function runs and deleted when the function ends.

Functions in R
========================================================

Let's create a function that calculates the variance of a vector x:

<div align="center">
<img src="./figures/variance.png" width=2000 height=350>
</div>


Clearly there are three steps to calculating this formula:

- Calculate the deviance
- Correct the sample size to make the estimator unbiased
- Divide the deviance by the corrected sample size


Functions in R
========================================================

- Create a vector called `x` which has `rnorm(100)` inside. With this we'll generate `100` random numbers with a normal distribution.

- Find the mean of the vector x with `mean(x)`

- Let's subtract each `x` from the `mean(x)`. This will give us the deviations from the overall mean.

- How can we subtract a single number from every element of a vector?

Functions in R
========================================================
### Answer:

```{r}
set.seed(1)

x <- rnorm(100)
mu <- mean(x)
x - mu
```

- What does `x - mu` give us? A scalar or a vector?
- How can we square every element of a vector?
- How can we sum the elements of a vector?

Functions in R
========================================================

Understanding the "environments" from before is key to writing code with fewer bugs: the simpler the environment, the fewer things can go wrong.

Let's create a simple function with a simple environment that calculates the deviance:

```{r}
deviance_sq <- function (x) {
    mu <- mean(x) # create an intermediate variable `mu`
    sum((x - mu)^2) # use mu to calculate the deviance
}
```

- The inputs are called arguments. In this case we take one (x).
- The output is called the "return value". R will return the value of the last line of the function.
- Here the environment of our functions has two variables, the input "x", and an intermediate value "mu".


Functions in R
========================================================

Simpler environments have fewer intermediate variables. Maybe we can try removing one intermediate variable to make the environment inside our function simpler:

```{r}
mu <- mean(x)
deviance_sq <- function (x) {
    sum((x - mu)^2)
}
```

What is happening here???

- The function body demands a variable `mu`. R will first search for `mu` inside the functions environment.
- If it doesn't find it there, it will look for the function in the next environment _higher_ up.
- Did we improve our code?


Functions in R
========================================================

```{r}
deviance_sq(c(1,2,3))

mu <- 2000

deviance_sq(c(1,2,3))
```

We can no longer rely on deviance_sq to give the correct deviance to our data!

- Functions which only demand variables from their own environment (only rely on their inputs) are called _pure_ functions.
- Tidyverse functions are almost always pure!
- We want our functions to have simple environments, but we also want them to be pure.


Functions in R
========================================================

We know how functions look up variables, but how do functions look up other functions?

__**Exactly the same way**__

```{r, eval = F}
set.seed(1)

our_plot <- function(x, y) plot(x, y)

random_num_generator <- function() {
  x <- rnorm(100)
  y <- rnorm(100)
  our_plot(x, y)
}
```

It will search the environment of the function and look for `our_plot` and `rnorm`, if not found, it will look in the _parent environment_ and so on..


Functions in R
========================================================

This too can be dangerous:

```{r}
deviance_sq <- function (x) {
    mu <- mean(x)
    sum((x - mu)^2)
}
deviance_sq(c(1,2,3))

mean <- function (y) {
     y*5000000
}
deviance_sq(c(1,2,3))
```
- We admit that most of our functions will rely on other functions.
- We need to be careful when choosing function names!  

```{r, echo = F}
rm(mean)
```

Functions in R
========================================================
Before keeping going, remember to `rm(mean)`

Like most things we do, calculating the variance involves multiple steps. Each step is full of opportunities for bugs. If we create a pure function for every step, we can test each step, and rely on each step working.

Let's write our steps in comments.


```{r, eval = F}
our_variance <- function(x) {
    # Calculate the deviance
    # Correct the sample size to make the estimator unbiased
    # Divide the deviance by the corrected sample size
}
```

Functions in R
========================================================

We already created a a function to calculate the deviance, so let's create a function that gives us the corrected sample size:


```{r}
unbiased_size <- function(x) length(x) - 1
```

- Notice we can ommit the `{}` if the function is only one line!

Let's test this to make sure we get what we expect:

```{r}
unbiased_size(c(1,2,3,4,5))
unbiased_size(c(1))
```

- Is the last example going to cause a problem for us???


Functions in R
========================================================

Clearly we can't have our unbiased size function return 0's. Let's make the function return a minimum of 1, always. How can we do that?

- We learned that a function returns the last line.

- We can use `return()` to return a value from the middle of the function!

- This allows us to create a function that returns different things based on the input:


```{r}
unbiased_size <- function(x) {
  if (length(x) <= 1) {
    return(1)
  }
  length(x) - 1
}
```
```{r, eval = F}
unbiased_size(c(1,2))
unbiased_size(c(1))
```
Without running the function, predict the result of both calls..

Functions in R
========================================================

Great! Now we have a function to compute deviance and one to correct the size of our sample. Let's see what we have left:

```{r, eval = F}
our_variance <- function(x) {
    # Divide the deviance by the corrected sample size
}
```

- We need a function that divides a number by another number.
- We don't need to create this ourselves because R already has it!
- You finish `our_variance` function by dividing `deviance_sq()` over `unbiased_size()`.
- Remember we will only use one argument.

Functions in R
========================================================
### Answer:
 
```{r}
our_variance <- function (x) deviance_sq(x) / unbiased_size(x)
```

Let's confirm that our results are correct:

```{r}
c(our_result = our_variance(x), R_result = var(x))
```

Functions in R
========================================================
Congrats! That's your first function, if you hadn't created one.

Now, this is the formula for the standard deviation:

<div align="center">
<img src="./figures/standard_dev.png" width=1500 height=600>
</div>

## Comparing this to the variance formula, how is this different?

Functions in R
========================================================

Let's implement it ourself. Remember that `our_variance` already calculates the variance so we simply need to...
- Wrap `our_variance` with the `sqrt()` function
- Wrap that in a function called `our_sd` and
- Remember that this new function will only accept one argument, `x`, which is gonna be passed to `our_variance`.

Functions in R
========================================================
This is the correct answer:
```{r}
our_sd <- function(x) {
  sqrt(our_variance(x))
}
```

Let's explain how this works:

- `our_sd` first searches for `our_variance` inside the function body and once it doesn't find it, it searches in the global environment and finds it.

- `x` is passed to `our_variance`, the function returns the variance, and then `sqrt` simply takes the
square root of the result of `our_variance`.

Functions in R
========================================================
Remember the "pipe" operator we used with dplyr?

```{r}
library(dplyr)
our_sd <- function(x) {
  our_variance(x) %>% sqrt()
}
```

It works with our functions too! We can create an assembly line of small functions and pipe them into each other. We can test each function individually, and have a system that works reliably.

Let's test our new standard deviation function!


Functions in R
========================================================

```{r}
set.seed(1)
x <- rnorm(10^7)
our_sd(x); sd(x)
```
Same result. What about performance time?

```{r}
system.time(our_sd(x)); system.time(sd(x))
```

Functions in R
========================================================

Most basic R functions are implement in C++ for faster performance.

- It's better to leave base functions as they are.
- This example is simply to show you how to create functions!

Functions in R
========================================================
Let's extend the standard deviation to create a function that calculates confidence intervals.

I won't bore you with the statistics so I'll give you the confidence intervals estimation.

```{r}
x <- rnorm(10^5, mean = 5, sd = 5) # Our variable of interest
ci_level <- 0.95 # Our confidence interval

# Z value calculation
a <- (1 - ci_level) / 2
z_value <- qnorm(1 - a)

# Confidence interval calcuation
lower_ci <- mean(x) -  (z_value * our_sd(x)) # We use our_sd function which uses our_variance. How cool!
upper_ci <- mean(x) +  (z_value * our_sd(x))
```

Now, you complete the work:

- Create a function with the name `our_ci`.
- This function will have two arguments, one called `x`, and another one called `ci_level` which will have the number `0.95` by default.
- Paste the previous code inside the function excluding the `x` function and the `ci_level` vector.

Functions in R
========================================================
### Answer:
```{r}
our_ci <- function(x, ci_level = 0.95) {

  # Z value calculation
  a <- (1 - ci_level) / 2
  z_value <- qnorm(1 - a)

  # Confidence interval calcuation
  lower_ci <- mean(x) -  (z_value * our_sd(x)) # See using our_sd function which uses our_variance
  upper_ci <- mean(x) +  (z_value * our_sd(x))
}
```

- Using the `c()` function concatenate `lower_ci` and `upper_ci` and paste it as the last line of the function.

Functions in R
========================================================
### Answer:
```{r}
our_ci <- function(x, ci_level = 0.95) {
  # Z value calculation
  a <- (1 - ci_level) / 2
  z_value <- qnorm(1 - a)
  # Confidence interval calcuation
  lower_ci <- mean(x) -  (z_value * our_sd(x)) # See using our_sd function which uses our_variance
  upper_ci <- mean(x) +  (z_value * our_sd(x))

  c(lower_bound = lower_ci, upper_bound = upper_ci)
}
```

```{r}
age <- rnorm(10^5, mean = 10, sd = 2)
our_ci(age, ci_level = 0.95); our_ci(age, ci_level = 0.50)
```

Loops, apply family and purrr package.
========================================================
Loops are tools we can use to repeat code N times.

For example:

```{r}
for (i in 1:5) {
  print(i)
}
```

- In the first run, `i == 1` because `1` is first number of `1:5`. In the second run `i == 2`, and so on.
- If the sequence would've been `2`, `4` and `6`, then in the first run `i == 2`, runs everything and then starts again with `i == 4` and so on.

Loops, apply family and purrr package.
========================================================
- You can also _not_ use the `i` to simply repeat the same thing N times.

For example:
```{r}
for (i in 1:5) {
  print("Hey")
}
```

Loops, apply family and purrr package.
========================================================
And most commonly, in R, you can use the `i` to *subset* numbers from vectors. _This loop you will write yourself._

We want to create a loop that calculates the confidence interval of our `x` variable for several `ci_values` without having to rewrite the same expression several times.

- Create a vector called `ci_values` which has this sequence of numbers: `seq(0.50, 0.90, 0.10)`. (Check its contents)
- How long is `ci_values`? Calculate its length with `length()` and save it to the name `n`.
- Create an empty _loop_  skeleton like the previous one

Loops, apply family and purrr package.
========================================================
#### Answer:

```{r, eval = F}
ci_values <- seq(0.50, 0.90, 0.10)
n <- length(ci_values)

for () {

}
```

- We want to loop through the values in `ci_values` so we need to have a sequence of numbers of `1:length(ci_values)`. This will make sure to index EACH value of the ci_values.
- Inside the parenthesis make sure `i` loops through `1:n`. Have a look at the previous loop if you forgot the syntax!
- Using the `our_ci` function, calculate the confidence interval for x
- In the `ci_level` _argument_ (second argument of the function) specify `ci_values[i]`.

Loops, apply family and purrr package.
========================================================

```{r, eval = F}
ci_values <- seq(0.50, 0.90, 0.10)
n <- length(ci_values)

for (i in 1:n) {
  print(our_ci(x, ci_level = ci_values[i]))
}
```

What is happening here?

- The loop will run the first time where `i == 1` and will pick `ci_values[1]`, so the first confidence interval will be for `0.50`.

- In the second iteration `i == 2`, so the same loop will be repeated. But with one difference: `ci_values[2]`. This means that the second uncertainty interval will be for `0.60`.

- This procedure gets repeated until `i` iterates over each number in `1:n`.


Loops, apply family and purrr package.
========================================================

## Result:

```{r}
ci_values <- seq(0.50, 0.90, 0.10)
n <- length(ci_values)

for (i in 1:n) {
  print(our_ci(x, ci_level = ci_values[i]))
}
```

Loops, apply family and purrr package.
========================================================

Loops are concepts from computer science that are widespread across all programming languages.

But in R, they're usually not advised unless in specific situations:

- The main reason is that loops tend to be slow (see [here](http://stackoverflow.com/questions/7142767/why-are-loops-slow-in-r) for an explanation why loops are slow and a counter-explanation from Karl Broman with an article showing that loops are ideal in some situations)

For that reason, R users have developed the `apply` family and the tidyverse has the `purrr` package.

Loops, apply family and purrr package.
========================================================

In short, the apply functions are loops but they're expressed in a different way.

Look at this example:
```{r, eval = F}
x <- 1:10

# This function accepts a vector and returns the same vector + 1
adder <- function(our_vec) {
  our_vec + 1
}

sapply(x, adder)
```

Try to visualize it this way:

```{r, echo = F}
setNames(1:10, rep("adder + 1", 10))[1:6]
```

- The `sapply` function takes the first object of the vector and applies the function.
- Then takes the second argument and repeats the same thing.

Loops, apply family and purrr package.
========================================================

Behind the scenes, this is exactly what's happening:
```{r, eval = F}
x <- 1:10

sapply(x, adder) # is equal to
adder(x[1])
adder(x[2])
adder(x[3])
...
adder(x[N])
```

So `sapply` passes the first argument of `sapply` to the argument of the `adder` function.

Loops, apply family and purrr package.
========================================================
The apply family of functions(`sapply`, `lapply`, `apply`, `vapply`, `tapply`, etc..) work VERY similarly, so if you understand how one works you can undestand how most work.

For example, `sapply` is the same as `lapply` but `lapply` ONLY returns a list.

Our previous example:
```{r, echo = F}
x <- 1:10

adder <- function(our_vec) {
  our_vec + 1
}
```

```{r}
sapply(x, adder)
```

```{r}
lapply(x, adder)[1:2]
```

Loops, apply family and purrr package.
========================================================

Don't get stuck up on simply moving values into a functions arguments.

```{r, eval = F}
descriptives <- list(mean, median, our_sd, our_variance, our_ci)
sapply(descriptives, function(our_fun) our_fun(x))
```

The function on the right is called an `anonymous function`. This means that the function is created on the spot (it doesn't have a name).

This code might look daunting but we're effectively doing the same thing:
- Take the first object of `descriptives` and pass it as the first argument of the `anonymous function`
- The first argument in the function is named `our_fun` and this argument then wraps `x` (which is our vector of interest)
- So the first run of the loop will take the function `mean` and calculate `mean(x)`
- The second run of the loop will take the function `median` and calculate `median(x)`
- And so on.. until the end of the list `descriptives`

## Why is the output of sapply a list?

Loops, apply family and purrr package.
========================================================
If you understand the `apply` functions, `purrr` is even easier because all functions workly similarly.

`purrr` is a rewrite of the `apply` family but with more consistency. Every looping function in `purrr` is called `map` instad of `apply`:

```{r, eval = F}
map(.x, .f, ...) # Always returns a list
map_lgl(.x, .f, ...) # Always returns a logical
map_chr(.x, .f, ...) # Always returns a character
map_int(.x, .f, ...) # Always returns a integer
map_dbl(.x, .f, ...) # Always returns a double
map_df(.x, .f, ..., .id = NULL) # Always returns a data frame
```

`.x` is always the value and `.f` is always the function (this order is not the same in the `apply` functions, see `?sapply` and `?mapply`).

All `map` variants make the sure the result is of the class `lgl`, `chr`, etc.. (remember how `sapply` gave us a list?)

Loops, apply family and purrr package.
========================================================

Enough of the theoretical talk, let's get your hands dirty.

Let's use the PISA data.
```{r}
library(tidyverse)
url <- "https://raw.githubusercontent.com/cimentadaj/tidyverse_seminars/master/first_seminar/data/pisa2015.csv"
student <- read_csv(url) %>%
  filter(!is.na(FISCED))
student
```

Loops, apply family and purrr package.
========================================================

Briefly, `nest` is a function that turns chunks of data frames into lists.
```{r}
(student_nested <-
  student %>%
  group_by(CNT) %>%
  nest()) %>%
  head(8)
```

This is VERY powerful.. look at the simpleness of this `tibble`.

Loops, apply family and purrr package.
========================================================

Each country `tibble` has `920` columns all in upper case. First, let's turn all the columns into `lowercase`.
- The `data` column is a list, so we can `map` through that list, change the column names to lower case and return the new data frame
- We will obtain a list containing each tibble with the lowercase column names and replace the existing `data` column.

```{r}
student_nested %>%
  mutate(data = map(data, function(country_tibble) {
    names(country_tibble) <- tolower(names(country_tibble))
    country_tibble
}))
```

Very easy!! Just go to the next slide.

Loops, apply family and purrr package.
========================================================

Wait! What did you just do?
- Remember `data` is a list containing a tibble for each country, so loop through each of these.
- `country_tibble` is just the name of the only argument of our `anonymous function`.
- The `anonymous function` changes the names of the tibble and then returns the tibble.
- So in each loop we will change the column names and then return the updated column.

```{r, eval = F}
map(data, function(country_tibble) {
    names(country_tibble) <- tolower(names(country_tibble))
    country_tibble
})
```

Because this will return a _list_ with each object being a tibble, we simply replaced the `data` column with this updated lowercase name tibble!

See? Once we understand it, it makes sense.

Loops, apply family and purrr package.
========================================================

Now, we don't want to have `920` columns per country. Let's only select `pv1math`, `misced`, and `st004d01t` (Mathematics score, Father's education and Gender.) You can do that very easily.

Copy the previous code that has the `mutate` function and inside our `anonymous function` (remember, the function created on the spot that doesn't have a name) ...

- pipe the last line to `rename` and change the name of the variables to `math`, `father_edu` and `gender`. Remember, the new name comes _before_ the `=` sign
- pipe the result to `select` and pick the three variables

Loops, apply family and purrr package.
========================================================
#### Answer:

```{r}
(student_nested <-
  student_nested %>%
  mutate(data = map(data, function(country_tibble) {
    names(country_tibble) <- tolower(names(country_tibble))

    country_tibble %>%
      rename(math = pv1math, father_edu = misced, gender = st004d01t) %>%
      select(math, father_edu, gender)
}))) %>%
  head(6)
```

Loops, apply family and purrr package.
========================================================

Look at how clean our workflow is. One single data frame encapsulating all the changes.

Once we're here we can do really cool stuff with the `map` family. How could we calculate the mean `math` score for each country?

Without saving anything:

- Pipe `student_nested$data` to `map_dbl` (why `map_dbl`?) and create an `anonymous function` that has one argument called `country_data`.
- Open `{}` brackets and inside the function calculcate the `mean` of `country_data$math`. Remember to exclude `NA's` by typing `na.rm = T`.

Loops, apply family and purrr package.
========================================================
### Answer:
```{r}
student_nested$data %>%
  map_dbl(function(country_data) mean(country_data$math, na.rm = T))
```

Those are the means of each specific country but we can't tease out which belongs to which.

Loops, apply family and purrr package.
========================================================
Let's turn the previous result into a column of `student_nested`.

- Pipe `student_nested` to `mutate` and create a new variable called `mean_math`.
- Inside `mean_math` specify `map_dbl` as the function and the column `data` as the first argument of `map_dbl`.
- Finally, copy the `anonymous function` from before as the function argument of `map_dbl`.

Loops, apply family and purrr package.
========================================================
```{r}
student_nested %>%
  mutate(mean_math = map_dbl(data, function(country_data) mean(country_data$math, na.rm = T)))
```

We could use our function `our_ci` to create two additional columns containing the upper and lower bounds of that mean.

Loops, apply family and purrr package.
========================================================
Let's do that.

- Create two new columns (with the same structure as `mean_math` column) one named `lower_bound` and the other named `upper_bound`.
- In both columns you'll simply use `our_ci` instead of `mean` function.
- But remember that the output of `our_ci` are two numbers (first lower then upper bounds), so for the `lower_bound` variable you'll need to run the same thing but subset the first object;
- For the upper variable you'll need to run exactly the same thing but subset the second object.

Loops, apply family and purrr package.
========================================================
### Answer:

```{r}
student_nested %>%
  mutate(mean_math = map_dbl(data, function(country_data) mean(country_data$math, na.rm = T)),
         lower_bound = map_dbl(data, function(country_data) our_ci(country_data$math)[1]),
         upper_bound = map_dbl(data, function(country_data) our_ci(country_data$math)[2]))
```

Alright, let's start to wrap things up. Let's talk about how to incorporate statistical modeling together with the `tidyverse`.

Loops, apply family and purrr package.
========================================================
The function to compute linear modeling in R is `lm`.

Think about this code:
```{r}
student_nested %>%
  mutate(lm_model = map(data, function(country_data) lm(math ~ father_edu + gender, data=country_data)))
```

Try to understand it:
- I'm looping through each dataset and calculating a linear model
- The output will be a list, so we save it with a name `lm_model`

Loops, apply family and purrr package.
========================================================

```{r, echo = F}
student_nested %>%
  mutate(lm_model = map(data, function(country_data) lm(math ~ father_edu + gender, data=country_data))) %>%
  .$lm_model %>%
  `[`(1)
```

This is the result of a linear model with the `intercept` and `coefficients` of both variables. This is useful for interpretation but not for data manipulation.

For turning modeling outputs into `tidy` tibbles we can use the `tidy` function from the `broom` package.

Loops, apply family and purrr package.
========================================================

```{r}
library(broom)

(student_lm <-
  student_nested %>%
  mutate(lm = map(data, function(country_data)
    tidy(lm(math ~ father_edu + gender, data=country_data))))) %>%
  head(5)
```
Don't feel intimidated by all this code. We're doing the same thing as before but wrapping each `lm` output with `tidy`. `tidy` turns that into a data frame.

Now we have a data frame of the regression output for each country!

Loops, apply family and purrr package.
========================================================
To finish, we `unnest` the `lm` column to compare slopes.

```{r}
(student_lm <-
  student_lm %>%
  unnest(lm))
```

Loops, apply family and purrr package.
========================================================
We could graph that by filtering the specific slope:

```{r, fig.width = 15}
student_lm %>%
  filter(term == "father_edu") %>%
  ggplot(aes(reorder(CNT, -estimate), estimate, fill = p.value < 0.05)) +
  geom_col() +
  coord_flip()
```

Loops, apply family and purrr package.
========================================================
Or we could graph the slope as a line instead of a plot:

```{r, fig.width = 17, fig.height = 5}
slope_students <-
  student_lm %>%
  filter(term != "gender") %>%
  select(CNT, term, estimate) %>%
  spread(term, estimate)

ggplot(student, aes(x = FISCED, y = PV1MATH)) +
  geom_point(alpha = 0.0000) +
  geom_abline(data = slope_students, aes(intercept = `(Intercept)`, slope = father_edu)) +
  facet_wrap(~ CNT)
```

Conclusions.
========================================================

Some pointers:

- Everytime you write a code more than two or three times, think about how to turn it into a function

- Functions are not only for statistical analysis but for ANYTHING you can think of automating(data wrangling, plots, custom made calculations)

- Whenever you're repeating a function many times (and only changing one thing), considering using the `map` family

- The benefits are obvious: less code, more readable and more compact

- Write, write and write functions and loops (either `apply` or `map`)

## I know it might look scary but R and other programming languages become powerful once you embrace these ideas.

========================================================

# Thanks!
## cimentadaj@gmail.com
- If you want to be in our mailing list
- Also, send feedback or want to propose a lecture/seminar

<div align="center">
<img src="./figures/tidyverse_pkg_stickers.png" width=800 height=530>
</div>