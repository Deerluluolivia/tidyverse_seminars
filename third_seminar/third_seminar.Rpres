ggplot2: The grammar of graphics
========================================================
author: Jorge Cimentada  
date: 2nd of March of 2017  
class: illustration
font-family: 'Helvetica'
width: 1800
height: 900

```{r, echo = F}
knitr::opts_chunk$set(
  fig.align = 'center',
  fig.width = 10
)
```

The grammar of graphics 
========================================================

ggplot2 is designed to work in a layered fashion, starting with a layer showing the raw data then adding layers of annotations and statistical summaries.

- Data points are mapped with aesthetic attributes (colour, shape, size) of geometric objects (points, lines, bars).

- The plot is a _transformation_ of the data and is drawn on a coordinate system.

- Faceting can be used to generate the same plot for different subsets of the dataset.

## It is the combination of these independent components that make up a graphic.

Wilkinson, Leland. "Statistics." The Grammar of Graphics (2005): 111-154.  
Wickham, Hadley. ggplot2: elegant graphics for data analysis. Springer, 2016.

Plots adaptable objects
========================================================
Briefly preparing the data:

```{r}
library(fivethirtyeight)
library(tidyverse)

region_states <- setNames(as.character(state.region), state.name)
division_states <- setNames(as.character(state.division), state.name)

upd_bad_drivers <-
  bad_drivers %>%
  filter(state != "District of Columbia") %>% # For some reason this state is not in both data sets
  mutate(region = region_states[state],
         division = division_states[state])
```

Plots adaptable objects
========================================================
Let's explain each component of the grammar of graphics.

Data points:
```{r}
upd_bad_drivers %>%
  select(perc_speeding, perc_alcohol) %>%
  head(5)
```

In this case, each `perc_speeding` has a paired `perc_alcohol` which can be united in a coordinate system.

Plots adaptable objects
========================================================
Coordinate system:

```{r}
upd_bad_drivers %>%
  ggplot(aes(x = perc_speeding, y = perc_alcohol))
```

In this case, we're plotting a Cartesian coordinate system but there are others like the polar coordinates or map coordinates.

Plots adaptable objects
========================================================
Geometric objects:

```{r, fig.height = 5}
upd_bad_drivers %>%
  ggplot(aes(x = perc_speeding, y = perc_alcohol)) +
  geom_point()
```
- The data points
- The empty coordinate system
- How do we represent the data points in the coordinate system? With a `geom_*` object.

Plots adaptable objects
========================================================
Aesthetic attributes:

Aesthetic attributes of the geometric objects can be things like:
- alpha (transparency)
- colour
- fill
- group
- shape
- size
- stroke (of a line)

Plots adaptable objects
========================================================
Aesthetic attributes:

```{r}
upd_bad_drivers %>%
  ggplot(aes(x = perc_speeding, y = perc_alcohol)) +
  geom_point(colour = "blue") 
```

Plots adaptable objects
========================================================
Aesthetic attributes:

```{r}
upd_bad_drivers %>%
  ggplot(aes(x = perc_speeding, y = perc_alcohol)) +
  geom_point(aes(colour = region))
```

Plots adaptable objects
========================================================
All `geom_*()` have a set of attributes which by default are set a constant value.

```{r, eval = F}
upd_bad_drivers %>%
  ggplot(aes(x = perc_speeding, y = perc_alcohol)) +
  geom_point()
```

This plot has a predetermined `colour`, `shape`, `size` and `transparency`. We can change it for another constant value or we can make the `aes`thetic as a function of another `variable`.

Plots adaptable objects
========================================================

Behind the scenes ggplot turns this data:
```{r, echo = F}
upd_bad_drivers %>%
  select(perc_speeding, perc_alcohol) %>%
  head(5)
```

into: 
```{r, echo = F}
ggplot_build(
  upd_bad_drivers %>%
  ggplot(aes(x = perc_speeding, y = perc_alcohol)) +
  geom_point()
)[[1]][[1]] %>%
  head(5)
```

Plots adaptable objects
========================================================

- The _aes_ inside `ggplot` is short for aesthetics  
- Each aesthetic can be mapped to another variable (in which case this aesthetic needs to be inside the `aes` function) or;
- Each aesthetic can be mapped to a constant value (in which case this aesthetic needs to be outside the `aes` function but _inside_ a `geom` object)

```{r, eval = F}
upd_bad_drivers %>%
  ggplot(aes(x = perc_speeding, y = perc_alcohol)) +
  geom_point(colour = "blue") 

upd_bad_drivers %>%
  ggplot(aes(x = perc_speeding, y = perc_alcohol)) +
  geom_point(aes(colour = region))
```

Plots adaptable objects
========================================================
Statistical transformations:
```{r, fig.height = 5}
upd_bad_drivers %>%
  ggplot(aes(x = perc_speeding, y = perc_alcohol)) +
  geom_smooth(method = "lm")
```
- `geom_point()` doesn't perform any transformation as it only places points in the coordinate system.  
- `geom_smooth()` performs a statistical transformation, usually a linear model or a lowess function.

Plots adaptable objects
========================================================

Behind the scenes `geom_smooth()` turns this data:
```{r, echo = F}
upd_bad_drivers %>%
  select(perc_speeding, perc_alcohol) %>%
  head(3)
```
into: 
```{r, echo = F}
ggplot_build(
  upd_bad_drivers %>%
  ggplot(aes(x = perc_speeding, y = perc_alcohol)) +
  geom_smooth(method = "lm")
)[[1]][[1]] %>%
  head(3)
```

Plots adaptable objects
========================================================
Statistical transformations:

Each `geom_*()` object is supported by a `stat_*()` function that transforms the data in a suitable format for the `geom_()` object.  For example, `stat_smooth()` is the one carrying out the transformation of the data. Check `?stat_smooth` for more details.

We could do this:
```{r, fig.height = 5}
upd_bad_drivers %>%
  ggplot(aes(x = perc_speeding, y = perc_alcohol)) +
  stat_smooth(method = "lm")
```

Plots adaptable objects
========================================================
#### Faceting:

Is the process in which the same graph is reproduced for subsets of the data.

```{r}
upd_bad_drivers %>%
  ggplot(aes(x = perc_speeding, y = perc_alcohol)) +
  geom_smooth(method = "lm") +
  facet_wrap(~ region)
```

Plots adaptable objects
========================================================
Together, the `data`, `aes`thetics, `stat_*`, `geom_*` and `faceting` form a layer.

The grammar of graphics allows you overlap layers in a way that makes sense for your specific problems. Let's look at a simple example.

```{r}
upd_bad_drivers %>%
  ggplot(aes(x = perc_speeding, y = perc_alcohol)) +
  geom_point()
```

... forms a layer of points.

Plots adaptable objects
========================================================

```{r}
upd_bad_drivers %>%
  ggplot(aes(x = perc_speeding, y = perc_alcohol)) +
  geom_smooth(method = "lm")
```

... forms a layer of a regression line. 

Plots adaptable objects
========================================================

Note that both these layers have the same two `x` and `y` variables. This makes it very easy to _overlay_ the two layers.

```{r, fig.align='center', fig.width=15, fig.height=8}
upd_bad_drivers %>%
  ggplot(aes(x = perc_speeding, y = perc_alcohol)) +
  geom_point() +
  geom_smooth(method = "lm")
```

Plots adaptable objects
========================================================
Look at this plot with two layers:

```{r, fig.height = 6}
regionline <-
  upd_bad_drivers %>%
  group_by(region) %>%
  summarize(region_mean = median(perc_speeding))

ggplot() +
  geom_point(data = upd_bad_drivers, aes(region, perc_speeding)) +
  geom_line(data = regionline, aes(region, region_mean, group = 1), colour = "red", size = 0.5)
```

Plots adaptable objects
========================================================
Let's break it down.

First, set the `ggplot()` call.
```{r}
(graph <- ggplot())
```

This function initializes a ggplot object. Note that no coordinate has been mapped and only a grey plane is produced.

Plots adaptable objects
========================================================

Next, we can add a `geom_point()` object.
```{r}
(graph <- graph + geom_point())
```

This new `geom` has no `data` or `aes`thetics. We can keep constructing the plot with each new concept.

Plots adaptable objects
========================================================
We add the `data` with the %+% operator (to add ggplot objects with each other) and the `aes`thetic containing the variables.

```{r}
(graph <- graph %+% upd_bad_drivers + aes(x = region, y = perc_speeding))
```

Plots adaptable objects
========================================================

At this point we have the graph we wanted. This is one layer and a complete plot. Following the grammar of graphics we can continue to add overlaying plots. 

```{r}
(graph <- graph +
  geom_line(data = regionline, aes(region, region_mean, group = 1), colour = "red"))
```

This plot reproduces the previous graph we saw before. But we can continue adding endless plots.

Plots adaptable objects
========================================================

What if we wanted to add a sort of confidence interval for the regional mean?
`geom_linerage` is a `geom` the accepts an `x` variable (`region` in our case) and a `ymin` and `ymax` `aes`thetic where it will draw the error bar. 

We just need to construct a data frame that has the upper and lower bounds for each region. We know `dplyr`, so this easy!

```{r}
(confidence_bad_drivers <-
  upd_bad_drivers %>%
  group_by(region) %>%
  summarize(ymin = mean(perc_speeding) - 2 * sd(perc_speeding),
            ymax = mean(perc_speeding) + 2 * sd(perc_speeding)))
```

Plots adaptable objects
========================================================

What would the plot look like on its own?

```{r}
confidence_bad_drivers %>%
  ggplot() +
  geom_errorbar(aes(x = region, ymin = ymin, ymax = ymax), colour = 'blue') +
  geom_point(data = upd_bad_drivers, aes(x = region, y = perc_speeding))
```
Let's add it to the previous plot.

Plots adaptable objects
========================================================

```{r}
(graph <- graph +
   geom_errorbar(data = confidence_bad_drivers,
                 aes(x = region, y = NULL, ymin = ymin, ymax = ymax), colour = 'blue'))
```

Why did we assign `y` to `NULL` when `geom_errorbar` doesn't use a `y` `aes`thetics. Try removing the `y` argument.

But that might be a mistake..it's passing the global `y` to an unexistent `y` `aes`thetic. See [here](https://stackoverflow.com/questions/42491913/ggplot2-asking-for-a-non-existent-aesthetic-in-geom-errorbar)

Plots adaptable objects
========================================================

All we did was equivalent to saying:

```{r, eval = F}
regionline <-
  upd_bad_drivers %>%
  group_by(region) %>%
  summarize(region_mean = median(perc_speeding),
            ymin = region_mean - 2 * sd(perc_speeding),
            ymax = region_mean + 2 * sd(perc_speeding))

ggplot() +
  geom_point(data = upd_bad_drivers, aes(region, perc_speeding)) +
  geom_line(data = regionline, aes(region, region_mean, group = 1), colour = "red") +
  geom_errorbar(data = regionline, aes(region, ymin = ymin, ymax = ymax), colour = 'blue')
```

Next slide is the graph.

Plots adaptable objects
========================================================

```{r, echo = F, fig.width = 10, fig.height = 12}
regionline <-
  upd_bad_drivers %>%
  group_by(region) %>%
  summarize(region_mean = median(perc_speeding),
            ymin = region_mean - 2 * sd(perc_speeding),
            ymax = region_mean + 2 * sd(perc_speeding))

ggplot() +
  geom_point(data = upd_bad_drivers, aes(region, perc_speeding)) +
  geom_line(data = regionline, aes(region, region_mean, group = 1), colour = "red") +
  geom_errorbar(data = regionline, aes(region, ymin = ymin, ymax = ymax), colour = 'blue')
```

Plots adaptable objects
========================================================

To finish on layering, let's understand how each layer does data and aesthetics lookup.

```{r, eval = F}
ggplot() +
  geom_point(data = upd_bad_drivers, aes(region, perc_speeding)) +
  geom_line(data = regionline, aes(region, region_mean, group = 1), colour = "red") +
  geom_errorbar(data = regionline, aes(region, ymin = ymin, ymax = ymax), colour = 'blue')
```

Each `geom` has their own `data` and `aes` argument specified plus other `aes`thetics mapped to constant values.

What would happen if I deleted the `colour` aesthetic from `geom_line` and moved `aes(colour = "red")` to the `ggplot()` call? Run this yourself.

Plots adaptable objects
========================================================

```{r}
ggplot(mapping = aes(colour = "red")) +
  geom_point(data = upd_bad_drivers, aes(region, perc_speeding)) +
  geom_line(data = regionline, aes(region, region_mean, group = 1)) +
  geom_errorbar(data = regionline, aes(region, ymin = ymin, ymax = ymax), colour = 'blue')
```

Now, try deleting `data = regionline` from both `geom_line` and `geom_errorbar` and only including it in `ggplot()`.

Plots adaptable objects
========================================================

```{r}
ggplot(data = regionline, mapping = aes(colour = "red")) +
  geom_point(data = upd_bad_drivers, aes(region, perc_speeding)) +
  geom_line(aes(region, region_mean, group = 1)) +
  geom_errorbar(aes(region, ymin = ymin, ymax = ymax), colour = 'blue')
```

Let's end by removing `region` from each of the `aes` calls and specifying it in the `ggplot` call. Remember to specify all the remaining `y` variables with the `y =` argument.

Plots adaptable objects
========================================================

```{r}
ggplot(data = regionline, mapping = aes(x = region, colour = "red")) +
  geom_point(data = upd_bad_drivers, aes(y = perc_speeding)) +
  geom_line(aes(y = region_mean, group = 1)) +
  geom_errorbar(aes(ymin = ymin, ymax = ymax), colour = 'blue')
``` 

Plots adaptable objects
========================================================

Let's establish some general rules.

- Everything specified in the `ggplot()` is automatically passed to every chained `geom`.

- If something is specified in the `geom`, but also was specified in `ggplot()`, `geom` will overwrite the options _for that_ `geom`.

- Specifying options in `ggplot()` (like moving our `data` argument and the `region` variable) is a good idea because it avoids verbose code and the DRY (Don't Repeat Yourself) principle.

- Each `geom` can have independent options from other geoms, allowing for full layer customization.

Different types of plots in ggplot2
========================================================

How many geoms (plots)?

- geom_point()
- geom_bar()
- geom_histogram()
- geom_boxplot()
- geom_density()
- geom_line()
- geom_smooth()
- And a bunch more

See [here](http://sape.inf.usi.ch/quick-reference/ggplot2/geom)

Different types of plots in ggplot2
========================================================

Next on we're gonna make each of these graphs and learn about legends, scales, axes and titles.

Since we already generated some scatterplots, let's start with a barplot.

- Barplots count the frequency of cases within a categorical variable. We can safely assume that `geom_bar` accepts one required `aes`thetic: an `x`. 

With what you've been introduced, you're capable enough of creating the plot.

Hint:  
`data` = `upd_bad_drivers`  
`x` = `region`  
`geom_bar()`

Remember to set _all_ of these options as 'global' parameters in the ggplot chain.

Different types of plots in ggplot2
========================================================

```{r}
ggplot(upd_bad_drivers, aes(x = region)) +
  geom_bar()
```

We wanna give each of the bars a different `fill` based on the `division` variable and then set the transparency (`alpha`) to `0.7`. Remember you'll be specifying two `aes`thetics but the first one mapped to a `variable` while the second to a constant value.

Different types of plots in ggplot2
========================================================

```{r}
ggplot(upd_bad_drivers, aes(x = region, fill = division), alpha = 0.7) +
  geom_bar()
```

Oops..why is this wrong?

Different types of plots in ggplot2
========================================================
Another caveat: if the `aes`thetic is set to a constant value, then it needs to be specified inside a `geom` object.

```{r}
ggplot(upd_bad_drivers, aes(x = region, fill = division)) +
  geom_bar(alpha = 0.7)
```

Different types of plots in ggplot2
========================================================

The legend title looks a bit ugly, lets change that. We can do that with the `scale_*_*` functions.

Answer these two questions:
- To which `aes`thetic attribute does the legend belong to?
- What _type_ of variable is our `fill` variable? i.e. ratio, continuous, categorical, etc..

In that same order, type `scale_yourfirstanswer_yoursecondanswer`. That function controls all the options of that attribute. Let's dive into what the function does.

Different types of plots in ggplot2
========================================================

`scale_fill_discrete()` was the correct answer!

What can we control with this function? 

discrete_scale(  

aesthetics,  
scale_name,  
palette,  
name = waiver(),  
breaks = waiver(),  
labels = waiver(),  
limits = NULL,  
expand = waiver(),  
na.translate = TRUE,  
na.value = NA,  
drop = TRUE,  
guide = "legend",  
position = "left",  
super = ScaleDiscrete  
)

Different types of plots in ggplot2
========================================================

It's important to understand how `name`, `breaks`, `labels` and `limits` work. They pretty much control the looks of your legend or scale.

```{r}
ggplot(upd_bad_drivers, aes(x = region, fill = division)) +
  geom_bar(alpha = 0.7) +
  scale_fill_discrete(name = "Regional division",
                      labels = paste("region", 1:9))
```

Different types of plots in ggplot2
========================================================
What type of variable is our `y` variable? categorical, continuous, etc.?

Use `scale_y_youranswer` to change the axis of the `y` or `x` variables.

```{r, eval = F}
ggplot(upd_bad_drivers, aes(x = region, fill = division)) +
  geom_bar(alpha = 0.7) +
  scale_fill_discrete(name = "Regional division",
                      labels = paste("region", 1:9)) +
  scale_y_continuous(name = "Our count",
                     breaks = seq(0, 20, 2),
                     limits = c(0, 20))
```

Different types of plots in ggplot2
========================================================
What type of variable is our `x` variable? categorical, continuous, etc.?

Use `scale_x_youranswer` to change the axis of the `y` or `x` variables.

```{r, eval = F}
ggplot(upd_bad_drivers, aes(x = region, fill = division)) +
  geom_bar(alpha = 0.7) +
  scale_fill_discrete(name = "Regional division",
                      labels = paste("region", 1:9)) +
  scale_y_continuous(name = "Our count",
                     breaks = seq(0, 20, 2),
                     limits = c(0, 20)) +
  scale_x_discrete(name = "Our regions",
                   labels = c("North C", "Northeast", "Down South", "Westcoast"))
```

Different types of plots in ggplot2
========================================================

## type ?scale_

Pretty much anything in ggplot has a `scale_*_*` function!  

The good thing is that almost all of these functions work exactly the same way. If you learn how these 4 or 5 arguments work then you can manipulate the aspect of all `aes`thetics.

Different types of plots in ggplot2
========================================================

Finally, how do you control the title of the plot?

Just as easy as adding ` + ggtitle("Our title")`.

Different types of plots in ggplot2
========================================================

```{r, echo = F, fig.height = 12, fig.width = 10}
ggplot(upd_bad_drivers, aes(x = region, fill = division)) +
  geom_bar(alpha = 0.7) +
  scale_fill_discrete(name = "Regional division",
                      labels = paste("region", 1:9)) +
  scale_y_continuous(name = "Our count",
                     breaks = seq(0, 20, 2),
                     limits = c(0, 20)) +
  scale_x_discrete(name = "Our regions",
                   labels = c("North C", "Northeast", "Down South", "Westcoast")) +
  ggtitle("Regional divisions")
```

Different types of plots in ggplot2
========================================================

Let's continue building the other plots but this time you'll be doing it.

With the data `upd_bad_drivers`..  
- plot the variable `perc_speeding` with a `geom_histogram`.
- Before you run the plot control how many bins are in `geom_histogram` with `bins = 30` and add
`scale_x_continuous` to set the `breaks` with `seq(10, 50, 5)`.

Different types of plots in ggplot2
========================================================
##### Answer:

```{r}
ggplot(upd_bad_drivers, aes(x = perc_speeding)) +
  geom_histogram(bins = 30) +
  scale_x_continuous(breaks = seq(10, 60, 5))
```

Different types of plots in ggplot2
========================================================

Let's build a `geom_boxplot`. Boxplots require a categorical `x` variable and a continuous `y` variable.

Build a a `geom_boxplot` with `upd_bad_drivers` as the data, `region` as the `x` variable and `perc_speeding` as the `y` variable. Save that to an object called `region_box`

Different types of plots in ggplot2
========================================================
###### Answer:

```{r}
(region_box <- ggplot(upd_bad_drivers, aes(x = region, y = perc_speeding)) +
  geom_boxplot())
```

Different types of plots in ggplot2
========================================================
To the `region_box` object add (`+`) an `aes` call with a `fill` aesthetic by the variable `division`.

Save that to the `region_box` again.

Different types of plots in ggplot2
========================================================

```{r, fig.height = 5}
(region_box <- region_box + aes(fill = division))
```

Let's change some of the features of this plot.

With this structure: `region_box` + ...
- Add `scale_fill_discrete` to change the `name` of the legend to `Regional Divisions`
- Add `ggtitle()` to include a title named 'Percentage speeding by regions and subdivisions'
- Add `xlab` to change the x label to 'Region'
- Add `ylab` to change the y label to 'Percentage Speeding'

Different types of plots in ggplot2
========================================================
```{r}
region_box +
  scale_fill_discrete(name = "Regional Divisions") +
  ggtitle("Percentage speeding by regions and subdivisions") +
  xlab('Region') +
  ylab('Percentage Speeding')
```

Looks a bit better, eh?

Different types of plots in ggplot2
========================================================

Let's move on to `geom_density()`. Let's have a look at the distribution of people who had an accident under alcohol consumption.

`Data` = `upd_bad_drivers`  
`x` = `perc_alcohol`  
`geom` = `geom_density()`

Finally, add (`+`) `facet_wrap(~ division)` to partition by regions

Different types of plots in ggplot2
========================================================
###### Answer:

```{r}
ggplot(upd_bad_drivers, aes(perc_alcohol)) +
  geom_density() +
  facet_wrap(~ division)
```

Different types of plots in ggplot2
========================================================

Let's move to a line plot. Line plots are usually generated for longitudinal data but we can use it for something else. We can answer this question: 

- In which states accidents were more due to speeding RATHER than due to alcohol consumption?

First we have to prepare the data. If you participated in the data cleaning seminar, then you should know this!

```{r}
summary_data <-
  upd_bad_drivers %>%
  select(state, perc_speeding, perc_alcohol) %>%
  gather(type_accident, perc, -state) %>%
  mutate(type_accident = gsub("perc_", "",type_accident)) %>%
  arrange(state, type_accident)
head(summary_data, 4)
```

Different types of plots in ggplot2
========================================================

So now we have the data ready.. let's start the plot.

- Using `summary_data`, specify `type_accident` as the `x` variable and `perc` as the `y` variable.
- Add `geom_line()` to the call but use the `group` aesthetic to set it by `state`. This means that we want the lines to be grouped by `state`s. Otherwise the lines are treated in the same order of the data set (it assumes was have an ordered longitudinal data, as lines should be.)

Different types of plots in ggplot2
========================================================
#### Answer:

```{r, fig.height = 5}
ggplot(summary_data, aes(x = type_accident, y = perc)) +
  geom_line(aes(group = state))
```

But this is a bit overwhelming.
- We could add a state-colour for each line but it would be really difficult to read.
- One alternative is to see if the majority of states has an upward or downward slope.

Different types of plots in ggplot2
========================================================
We could set the colour of the lines to a dummy of whether the slope is upwards or downwards.

How could we do that? Create a logical statement on the fly. Yet, there's a problem: our data is in a tidy format, making it difficult to construct the logical statement.

Remember?

```{r}
head(summary_data, 5)
```

Different types of plots in ggplot2
========================================================
We can exhibit or data ninja skills by `spread`ing the stacked columns, calculate the logical statement, and `gather` again to plot it.

```{r, fig.height = 5}
summary_data %>%
  spread(type_accident, perc) %>%
  mutate(slope = alcohol > speeding) %>%
  gather(type_accident, perc, alcohol:speeding) %>%
  ggplot(aes(x = type_accident, y = perc)) +
  geom_line(aes(group = state, colour = slope))
```

That was cool.

Different types of plots in ggplot2
========================================================

We coud always just do a simple time series with the `economics` data. 

- Pass `economics` to `ggplot()` and include `date` as `x` and `unemploy` as `y`.

```{r, eval = F}
ggplot(economics, aes(date, unemploy)) + geom_line()
```

Different types of plots in ggplot2
========================================================
We can do some really fancy stuff once you know how to grammar and separate `geom`s work.

```{r, fig.width = 20, echo = F}
unempl <- ggplot(economics, aes(date, unemploy)) + geom_line()
presidential <- presidential[-(1:3), ]

yrng <- range(economics$unemploy)
xrng <- range(economics$date)

unempl +
  geom_vline(aes(xintercept = as.numeric(start)),
             data = presidential) +
  geom_rect(aes(NULL, NULL, xmin = start, xmax = end, fill = party), ymin = yrng[1], ymax = yrng[2],
            data = presidential) +
  scale_fill_manual(values = alpha(c("blue", "red"), 0.2)) +
  geom_text(aes(x = start, y = yrng[1], label = name),
            data = presidential, size = 7, hjust = 0, vjust = 0)
```

Wanna look at the code?  

Wickham, Hadley. ggplot2: elegant graphics for data analysis. Springer, 2016.
Pages 86-87

Summary of ggplot2
========================================================

- It's very complex (read ggplot2's book)  

- But it's based on a simple underlying grammar. If you master it, you can construct thousands of things!  
- Don't concentrate solely on ggplot2: the input data must be in the right format, so be a data ninja.  

- Master `geom`s, `aes`thetics and basic scale arguments and you should be able to perform hundreds of graphics with little code.

============================================================

# Thanks!
## cimentadaj@gmail.com
- If you want to be in our mailing list
- Also, send feedback or want to propose a lecture/seminar

<div align="center">
<img src="./figures/tidyverse_pkg_stickers.png" width=800 height=530>
</div>